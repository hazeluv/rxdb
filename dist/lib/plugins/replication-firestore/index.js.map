{"version":3,"file":"index.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","RxFirestoreReplicationState","firestore","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","RxReplicationState","syncFirestore","options","pullStream$","Subject","replicationPrimitivesPull","waitForLeadership","serverTimestampField","primaryPath","schema","schemaPart","getSchemaByObjectPath","jsonSchema","includes","newRxError","field","handler","lastPulledCheckpoint","batchSize","useDocs","length","checkpoint","documents","lastDoc","ensureNotFalsy","lastOfArray","map","row","firestoreRowToDocData","newCheckpoint","id","serverTimestamp","serverTimestampToIsoString","data","ret","newerQuery","sameTimeQuery","lastServerTimestamp","isoStringToServerTimestamp","query","where","orderBy","limit","mustsReRun","waitForPendingWrites","database","runTransaction","_tx","Promise","all","getDocs","undefined","newerQueryResult","sameTimeQueryResult","metadata","hasPendingWrites","docs","missingAmount","additonalDocs","slice","filter","x","concat","modifier","stream$","asObservable","replicationPrimitivesPush","rows","writeRowsById","docIds","docId","newDocumentState","conflicts","documentId","docsInDbResult","docsInDbById","forEach","docDataInDb","stripServerTimestampField","batch","writeBatch","hasWrite","Object","entries","docInDb","isEqual","docRef","doc","writeDocData","flatClone","writeRow","set","stripPrimaryKey","assumedMasterState","conflictHandler","realMasterState","commit","replicationState","FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX","fastUnsecureHash","projectId","startBefore","start","cancelBefore","cancel","lastChangeQuery","unsubscribe","onSnapshot","_querySnapshot","reSync","error","subjects","next","startReplicationOnLeaderShip","RxDBReplicationFirestorePlugin","name","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-firestore/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncCouchDBNew()-function to rxdb\n * you can use it to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone,\n    lastOfArray\n} from '../../util';\n\nimport {\n    doc,\n    query,\n    where,\n    orderBy,\n    limit,\n    getDocs,\n    onSnapshot,\n    runTransaction,\n    writeBatch,\n    serverTimestamp,\n    QueryDocumentSnapshot,\n    waitForPendingWrites,\n    documentId\n} from 'firebase/firestore';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    ById,\n    getSchemaByObjectPath,\n    newRxError,\n    WithDeleted\n} from '../../';\n\nimport type {\n    FirestoreCheckpointType,\n    FirestoreOptions,\n    SyncOptionsFirestore\n} from './firestore-types';\nimport { Subject } from 'rxjs';\nimport {\n    firestoreRowToDocData,\n    FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    isoStringToServerTimestamp,\n    serverTimestampToIsoString,\n    stripPrimaryKey,\n    stripServerTimestampField\n} from './firestore-helper';\n\nexport * from './firestore-helper';\nexport * from './firestore-types';\n\nexport class RxFirestoreReplicationState<RxDocType> extends RxReplicationState<RxDocType, FirestoreCheckpointType> {\n    constructor(\n        public readonly firestore: FirestoreOptions<RxDocType>,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, FirestoreCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function syncFirestore<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: SyncOptionsFirestore<RxDocType>\n): RxFirestoreReplicationState<RxDocType> {\n    const collection = this;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, FirestoreCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, FirestoreCheckpointType> | undefined;\n    options.live = typeof options.live === 'undefined' ? true : options.live;\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const serverTimestampField = typeof options.serverTimestampField === 'undefined' ? 'serverTimestamp' : options.serverTimestampField;\n    options.serverTimestampField = serverTimestampField;\n    const primaryPath = collection.schema.primaryPath;\n\n    /**\n     * The serverTimestampField MUST NOT be part of the collections RxJsonSchema.\n     */\n    const schemaPart = getSchemaByObjectPath(this.schema.jsonSchema, serverTimestampField);\n    if (\n        schemaPart ||\n        // also must not be nested.\n        serverTimestampField.includes('.')\n    ) {\n        throw newRxError('RC6', {\n            field: serverTimestampField,\n            schema: this.schema.jsonSchema\n        });\n    }\n\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: FirestoreCheckpointType,\n                batchSize: number\n            ) {\n                let newerQuery: ReturnType<typeof query>;\n                let sameTimeQuery: ReturnType<typeof query> | undefined;\n\n                if (lastPulledCheckpoint) {\n                    const lastServerTimestamp = isoStringToServerTimestamp(lastPulledCheckpoint.serverTimestamp);\n                    newerQuery = query(options.firestore.collection,\n                        where(serverTimestampField, '>', lastServerTimestamp),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                    sameTimeQuery = query(options.firestore.collection,\n                        where(serverTimestampField, '==', lastServerTimestamp),\n                        where(primaryPath, '>', lastPulledCheckpoint.id),\n                        orderBy(primaryPath, 'asc'),\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                } else {\n                    newerQuery = query(options.firestore.collection,\n                        orderBy(serverTimestampField, 'asc'),\n                        limit(batchSize)\n                    );\n                }\n\n                let mustsReRun = true;\n                let useDocs: QueryDocumentSnapshot<RxDocType>[] = [];\n                while (mustsReRun) {\n                    /**\n                     * Local writes that have not been persisted to the server\n                     * are in pending state and do not have a correct serverTimestamp set.\n                     * We have to ensure we only use document states that are in sync with the server.\n                     * @link https://medium.com/firebase-developers/the-secrets-of-firestore-fieldvalue-servertimestamp-revealed-29dd7a38a82b\n                     */\n                    await waitForPendingWrites(options.firestore.database);\n                    await runTransaction(options.firestore.database, async (_tx) => {\n                        useDocs = [];\n                        const [\n                            newerQueryResult,\n                            sameTimeQueryResult\n                        ] = await Promise.all([\n                            getDocs(newerQuery),\n                            sameTimeQuery ? getDocs(sameTimeQuery) : undefined\n                        ]);\n\n                        if (\n                            newerQueryResult.metadata.hasPendingWrites ||\n                            (sameTimeQuery && ensureNotFalsy(sameTimeQueryResult).metadata.hasPendingWrites)\n                        ) {\n                            return;\n                        } else {\n                            mustsReRun = false;\n\n                            if (sameTimeQuery) {\n                                useDocs = ensureNotFalsy(sameTimeQueryResult).docs as any;\n                            }\n                            const missingAmount = batchSize - useDocs.length;\n                            if (missingAmount > 0) {\n                                const additonalDocs = newerQueryResult.docs.slice(0, missingAmount).filter(x => !!x);\n                                useDocs = useDocs.concat(additonalDocs as any);\n                            }\n                        }\n                    });\n                }\n\n                if (useDocs.length === 0) {\n                    return {\n                        checkpoint: lastPulledCheckpoint,\n                        documents: []\n                    };\n                }\n                const lastDoc = ensureNotFalsy(lastOfArray(useDocs));\n                const documents: WithDeleted<RxDocType>[] = useDocs\n                    .map(row => firestoreRowToDocData(\n                        serverTimestampField,\n                        primaryPath,\n                        row\n                    ));\n                const newCheckpoint: FirestoreCheckpointType = {\n                    id: lastDoc.id,\n                    serverTimestamp: serverTimestampToIsoString(serverTimestampField, lastDoc.data())\n                };\n                const ret = {\n                    documents: documents,\n                    checkpoint: newCheckpoint\n                };\n                return ret;\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const writeRowsById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n                const docIds: string[] = rows.map(row => {\n                    const docId = (row.newDocumentState as any)[primaryPath];\n                    writeRowsById[docId] = row;\n                    return docId;\n                });\n                await waitForPendingWrites(options.firestore.database);\n                let conflicts: WithDeleted<RxDocType>[] = [];\n\n                /**\n                 * Everything must run INSIDE of the transaction\n                 * because on tx-errors, firebase will re-run the transaction on some cases.\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions#transaction_failure\n                 * @link https://firebase.google.com/docs/firestore/manage-data/transactions\n                 */\n                await runTransaction(options.firestore.database, async (_tx) => {\n                    conflicts = []; // reset in case the tx has re-run.\n                    /**\n                     * @link https://stackoverflow.com/a/48423626/3443137\n                     */\n                    const docsInDbResult = await getDocs(\n                        query(\n                            options.firestore.collection,\n                            where(documentId(), 'in', docIds)\n                        )\n                    );\n                    const docsInDbById: ById<RxDocType> = {};\n                    docsInDbResult.docs.forEach(row => {\n                        const docDataInDb = stripServerTimestampField(serverTimestampField, row.data());\n                        const docId = row.id;\n                        (docDataInDb as any)[primaryPath] = docId;\n                        docsInDbById[docId] = docDataInDb;\n                    });\n\n                    /**\n                     * @link https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\n                     */\n                    const batch = writeBatch(options.firestore.database);\n                    let hasWrite = false;\n                    await Promise.all(\n                        Object.entries(writeRowsById).map(async ([docId, writeRow]) => {\n                            const docInDb: RxDocType | undefined = docsInDbById[docId];\n\n                            if (\n                                docInDb &&\n                                (\n                                    !writeRow.assumedMasterState ||\n                                    (await collection.conflictHandler({\n                                        newDocumentState: docInDb as any,\n                                        realMasterState: writeRow.assumedMasterState\n                                    }, 'replication-firestore-push')).isEqual === false\n                                )\n                            ) {\n                                // conflict\n                                conflicts.push(docInDb as any);\n                            } else {\n                                // no conflict\n                                hasWrite = true;\n                                const docRef = doc(options.firestore.collection, docId);\n                                const writeDocData = flatClone(writeRow.newDocumentState);\n                                (writeDocData as any)[serverTimestampField] = serverTimestamp();\n                                if (!docInDb) {\n                                    // insert\n                                    batch.set(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                } else {\n                                    // update\n                                    batch.update(docRef, stripPrimaryKey(primaryPath, writeDocData));\n                                }\n                            }\n                        })\n                    );\n\n                    if (hasWrite) {\n                        await batch.commit();\n                    }\n                });\n                await waitForPendingWrites(options.firestore.database);\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n\n    const replicationState = new RxFirestoreReplicationState<RxDocType>(\n        options.firestore,\n        FIRESTORE_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(options.firestore.projectId),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        const cancelBefore = replicationState.cancel.bind(replicationState);\n        replicationState.start = () => {\n            const lastChangeQuery = query(\n                options.firestore.collection,\n                orderBy(serverTimestampField, 'desc'),\n                limit(1)\n            );\n            const unsubscribe = onSnapshot(\n                lastChangeQuery,\n                (_querySnapshot) => {\n                    /**\n                     * There is no good way to observe the event stream in firestore.\n                     * So instead we listen to any write to the collection\n                     * and then emit a 'RESYNC' flag.\n                     */\n                    replicationState.reSync();\n                },\n                (error) => {\n                    replicationState.subjects.error.next(\n                        newRxError('RC_STREAM', { error })\n                    );\n                }\n            );\n            replicationState.cancel = () => {\n                unsubscribe();\n                return cancelBefore();\n            };\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n\nexport const RxDBReplicationFirestorePlugin: RxPlugin = {\n    name: 'replication-firestore',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncFirestore = syncFirestore;\n        }\n    }\n};\n"],"mappings":"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"}