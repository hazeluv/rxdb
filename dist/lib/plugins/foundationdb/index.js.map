{"version":3,"file":"index.js","names":["versionSet","getRxStorageFoundationDB","settings","apiVersion","Error","require","setAPIVersion","storage","name","statics","RxStorageDexieStatics","createStorageInstance","params","ensureRxStorageInstanceParamsAreCorrect","useSettings","Object","assign","options","batchSize","createFoundationDBStorageInstance"],"sources":["../../../../src/plugins/foundationdb/index.ts"],"sourcesContent":["import { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport type {\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport { RxStorageDexieStatics } from '../dexie/dexie-statics';\nimport type {\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n\nimport {\n    createFoundationDBStorageInstance,\n    RxStorageInstanceFoundationDB\n} from './rx-storage-instance-foundationdb';\n\n\nlet versionSet: undefined | number;\n\nexport function getRxStorageFoundationDB(\n    settings: RxStorageFoundationDBSettings\n): RxStorageFoundationDB {\n    if (versionSet && versionSet !== settings.apiVersion) {\n        throw new Error('foundationdb already initialized with api version ' + versionSet);\n    } else if (!versionSet) {\n        versionSet = settings.apiVersion;\n        const { setAPIVersion } = require('foundationdb');\n        setAPIVersion(settings.apiVersion);\n    }\n\n\n    const storage: RxStorageFoundationDB = {\n        name: 'foundationdb',\n        statics: RxStorageDexieStatics,\n        createStorageInstance<RxDocType>(\n            params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>\n        ): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n            ensureRxStorageInstanceParamsAreCorrect(params);\n            const useSettings = Object.assign(\n                {},\n                settings,\n                params.options\n            );\n            if (!useSettings.batchSize) {\n                useSettings.batchSize = 50;\n            }\n            return createFoundationDBStorageInstance(this, params, useSettings);\n        }\n    };\n\n    return storage;\n}\n\n\nexport * from './foundationdb-types';\nexport * from './foundationdb-helpers';\n"],"mappings":";;;;;;;;;AAAA;AAIA;AAOA;AA2CA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AACA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AAtCA,IAAIA,UAA8B;AAE3B,SAASC,wBAAwB,CACpCC,QAAuC,EAClB;EACrB,IAAIF,UAAU,IAAIA,UAAU,KAAKE,QAAQ,CAACC,UAAU,EAAE;IAClD,MAAM,IAAIC,KAAK,CAAC,oDAAoD,GAAGJ,UAAU,CAAC;EACtF,CAAC,MAAM,IAAI,CAACA,UAAU,EAAE;IACpBA,UAAU,GAAGE,QAAQ,CAACC,UAAU;IAChC,eAA0BE,OAAO,CAAC,cAAc,CAAC;MAAzCC,aAAa,YAAbA,aAAa;IACrBA,aAAa,CAACJ,QAAQ,CAACC,UAAU,CAAC;EACtC;EAGA,IAAMI,OAA8B,GAAG;IACnCC,IAAI,EAAE,cAAc;IACpBC,OAAO,EAAEC,mCAAqB;IAC9BC,qBAAqB,iCACjBC,MAAgG,EAC/C;MACjD,IAAAC,wDAAuC,EAACD,MAAM,CAAC;MAC/C,IAAME,WAAW,GAAGC,MAAM,CAACC,MAAM,CAC7B,CAAC,CAAC,EACFd,QAAQ,EACRU,MAAM,CAACK,OAAO,CACjB;MACD,IAAI,CAACH,WAAW,CAACI,SAAS,EAAE;QACxBJ,WAAW,CAACI,SAAS,GAAG,EAAE;MAC9B;MACA,OAAO,IAAAC,gEAAiC,EAAC,IAAI,EAAEP,MAAM,EAAEE,WAAW,CAAC;IACvE;EACJ,CAAC;EAED,OAAOP,OAAO;AAClB"}