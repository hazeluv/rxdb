{"version":3,"file":"rx-storage-ipc-main.js","names":["exposeIpcMainRxStorage","args","onCreateRemoteStorage$","Subject","portByDatabaseInstanceToken","Map","ipcMain","on","IPC_RENDERER_KEY_PREFIX","key","join","event","params","ports","port","set","databaseInstanceToken","next","exposeRxStorageMessageChannel","storage","IPC_RENDERER_TO_MAIN","_event","message","getFromMapOrThrow","instanceId","ensureNotFalsy","onmessage","data"],"sources":["../../../../src/plugins/electron/rx-storage-ipc-main.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the electron main process\n */\nimport type {\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow\n} from '../../util';\nimport { Subject } from 'rxjs';\nimport {\n    IPC_RENDERER_KEY_PREFIX,\n    IPC_RENDERER_TO_MAIN\n} from './electron-helper';\nimport {\n    exposeRxStorageMessageChannel,\n    RxStorageMessageToRemote\n} from '../../rx-storage-message-channel';\n\nexport function exposeIpcMainRxStorage<T, D>(\n    args: {\n        key: string;\n        storage: RxStorage<T, D>;\n        ipcMain: any;\n    }\n) {\n\n    const onCreateRemoteStorage$ = new Subject<{\n        port: MessagePort;\n        params: RxStorageInstanceCreationParams<any, any>;\n    }>;\n    const portByDatabaseInstanceToken = new Map<string, MessagePort>();\n    args.ipcMain.on(\n        [\n            IPC_RENDERER_KEY_PREFIX,\n            'postMessage',\n            args.key,\n            'createStorageInstance'\n        ].join('|'),\n        (event: any, params: RxStorageInstanceCreationParams<any, any>) => {\n            const [port] = event.ports;\n            portByDatabaseInstanceToken.set(params.databaseInstanceToken, port);\n            onCreateRemoteStorage$.next({\n                params,\n                port\n            });\n        });\n\n    exposeRxStorageMessageChannel({\n        storage: args.storage,\n        onCreateRemoteStorage$\n    });\n\n\n    args.ipcMain.on(IPC_RENDERER_TO_MAIN, (_event: any, message: RxStorageMessageToRemote) => {\n        const port = getFromMapOrThrow(portByDatabaseInstanceToken, message.instanceId);\n        ensureNotFalsy(port.onmessage as any)({\n            data: message\n        });\n    });\n}\n"],"mappings":";;;;;;AAQA;AAIA;AACA;AAIA;AAjBA;AACA;AACA;AACA;;AAmBO,SAASA,sBAAsB,CAClCC,IAIC,EACH;EAEE,IAAMC,sBAAsB,GAAG,IAAIC,aAAO,EAGxC;EACF,IAAMC,2BAA2B,GAAG,IAAIC,GAAG,EAAuB;EAClEJ,IAAI,CAACK,OAAO,CAACC,EAAE,CACX,CACIC,uCAAuB,EACvB,aAAa,EACbP,IAAI,CAACQ,GAAG,EACR,uBAAuB,CAC1B,CAACC,IAAI,CAAC,GAAG,CAAC,EACX,UAACC,KAAU,EAAEC,MAAiD,EAAK;IAC/D,mBAAeD,KAAK,CAACE,KAAK;MAAnBC,IAAI;IACXV,2BAA2B,CAACW,GAAG,CAACH,MAAM,CAACI,qBAAqB,EAAEF,IAAI,CAAC;IACnEZ,sBAAsB,CAACe,IAAI,CAAC;MACxBL,MAAM,EAANA,MAAM;MACNE,IAAI,EAAJA;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEN,IAAAI,sDAA6B,EAAC;IAC1BC,OAAO,EAAElB,IAAI,CAACkB,OAAO;IACrBjB,sBAAsB,EAAtBA;EACJ,CAAC,CAAC;EAGFD,IAAI,CAACK,OAAO,CAACC,EAAE,CAACa,oCAAoB,EAAE,UAACC,MAAW,EAAEC,OAAiC,EAAK;IACtF,IAAMR,IAAI,GAAG,IAAAS,uBAAiB,EAACnB,2BAA2B,EAAEkB,OAAO,CAACE,UAAU,CAAC;IAC/E,IAAAC,oBAAc,EAACX,IAAI,CAACY,SAAS,CAAQ,CAAC;MAClCC,IAAI,EAAEL;IACV,CAAC,CAAC;EACN,CAAC,CAAC;AACN"}