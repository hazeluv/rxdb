{"version":3,"file":"rx-storage-ipc-main.js","names":["ensureNotFalsy","getFromMapOrThrow","Subject","IPC_RENDERER_KEY_PREFIX","IPC_RENDERER_TO_MAIN","exposeRxStorageMessageChannel","exposeIpcMainRxStorage","args","onCreateRemoteStorage$","portByDatabaseInstanceToken","Map","ipcMain","on","key","join","event","params","ports","port","set","databaseInstanceToken","next","storage","_event","message","instanceId","onmessage","data"],"sources":["../../../../src/plugins/electron/rx-storage-ipc-main.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the electron main process\n */\nimport type {\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow\n} from '../../util';\nimport { Subject } from 'rxjs';\nimport {\n    IPC_RENDERER_KEY_PREFIX,\n    IPC_RENDERER_TO_MAIN\n} from './electron-helper';\nimport {\n    exposeRxStorageMessageChannel,\n    RxStorageMessageToRemote\n} from '../../rx-storage-message-channel';\n\nexport function exposeIpcMainRxStorage<T, D>(\n    args: {\n        key: string;\n        storage: RxStorage<T, D>;\n        ipcMain: any;\n    }\n) {\n\n    const onCreateRemoteStorage$ = new Subject<{\n        port: MessagePort;\n        params: RxStorageInstanceCreationParams<any, any>;\n    }>;\n    const portByDatabaseInstanceToken = new Map<string, MessagePort>();\n    args.ipcMain.on(\n        [\n            IPC_RENDERER_KEY_PREFIX,\n            'postMessage',\n            args.key,\n            'createStorageInstance'\n        ].join('|'),\n        (event: any, params: RxStorageInstanceCreationParams<any, any>) => {\n            const [port] = event.ports;\n            portByDatabaseInstanceToken.set(params.databaseInstanceToken, port);\n            onCreateRemoteStorage$.next({\n                params,\n                port\n            });\n        });\n\n    exposeRxStorageMessageChannel({\n        storage: args.storage,\n        onCreateRemoteStorage$\n    });\n\n\n    args.ipcMain.on(IPC_RENDERER_TO_MAIN, (_event: any, message: RxStorageMessageToRemote) => {\n        const port = getFromMapOrThrow(portByDatabaseInstanceToken, message.instanceId);\n        ensureNotFalsy(port.onmessage as any)({\n            data: message\n        });\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAKA,SACIA,cAAc,EACdC,iBAAiB,QACd,YAAY;AACnB,SAASC,OAAO,QAAQ,MAAM;AAC9B,SACIC,uBAAuB,EACvBC,oBAAoB,QACjB,mBAAmB;AAC1B,SACIC,6BAA6B,QAE1B,kCAAkC;AAEzC,OAAO,SAASC,sBAAsB,CAClCC,IAIC,EACH;EAEE,IAAMC,sBAAsB,GAAG,IAAIN,OAAO,EAGxC;EACF,IAAMO,2BAA2B,GAAG,IAAIC,GAAG,EAAuB;EAClEH,IAAI,CAACI,OAAO,CAACC,EAAE,CACX,CACIT,uBAAuB,EACvB,aAAa,EACbI,IAAI,CAACM,GAAG,EACR,uBAAuB,CAC1B,CAACC,IAAI,CAAC,GAAG,CAAC,EACX,UAACC,KAAU,EAAEC,MAAiD,EAAK;IAC/D,mBAAeD,KAAK,CAACE,KAAK;MAAnBC,IAAI;IACXT,2BAA2B,CAACU,GAAG,CAACH,MAAM,CAACI,qBAAqB,EAAEF,IAAI,CAAC;IACnEV,sBAAsB,CAACa,IAAI,CAAC;MACxBL,MAAM,EAANA,MAAM;MACNE,IAAI,EAAJA;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAENb,6BAA6B,CAAC;IAC1BiB,OAAO,EAAEf,IAAI,CAACe,OAAO;IACrBd,sBAAsB,EAAtBA;EACJ,CAAC,CAAC;EAGFD,IAAI,CAACI,OAAO,CAACC,EAAE,CAACR,oBAAoB,EAAE,UAACmB,MAAW,EAAEC,OAAiC,EAAK;IACtF,IAAMN,IAAI,GAAGjB,iBAAiB,CAACQ,2BAA2B,EAAEe,OAAO,CAACC,UAAU,CAAC;IAC/EzB,cAAc,CAACkB,IAAI,CAACQ,SAAS,CAAQ,CAAC;MAClCC,IAAI,EAAEH;IACV,CAAC,CAAC;EACN,CAAC,CAAC;AACN"}