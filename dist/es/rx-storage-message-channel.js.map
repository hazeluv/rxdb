{"version":3,"file":"rx-storage-message-channel.js","names":["filter","firstValueFrom","Subject","ensureNotFalsy","PROMISE_RESOLVE_VOID","randomCouchString","body","recover","result","e","then","RxStorageMessageChannel","settings","messageChannelByPort","WeakMap","name","statics","createStorageInstance","params","messageChannel","MessageChannel","set","port1","port2","port","messages$","waitForOkPromise","onmessage","msg","next","data","createRemoteStorage","waitForOkResult","error","Error","toString","RxStorageInstanceMessageChannel","databaseName","collectionName","schema","options","storage","internals","changes$","conflicts$","subs","closed","lastRequestId","requestIdSeed","push","subscribe","method","requestRemote","methodName","requestIdNr","requestId","responsePromise","pipe","answerTo","message","instanceId","databaseInstanceToken","postMessage","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageMessageChannel","exposeRxStorageMessageChannel","instanceByFullName","Map","stateByPort","onCreateRemoteStorage$","key","state","storageInstance","changes","conflicts","plainMessage","ports","length","closeBreakResponse","p","fullName","err","errorResponse","version","join","get","newRxStorageInstance"],"sources":["../../src/rx-storage-message-channel.ts"],"sourcesContent":["/**\n * This file contains helpers\n * that are in use when the RxStorage run in another JavaScript process,\n * like electron ipcMain/Renderer, WebWorker and so on\n * where we communicate with the main process with the MessageChannel API.\n */\n\nimport {\n    filter,\n    firstValueFrom,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from './types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from './util';\n\nexport type RxStorageMessageFromRemote = {\n    instanceId: string;\n    answerTo: string; // id of the request\n    method: keyof RxStorageInstance<any, any, any>;\n    error?: any;\n    return?: any;\n};\n\nexport type RxStorageMessageToRemote = {\n    instanceId: string;\n    /**\n     * Unique ID of the request\n     */\n    requestId: string;\n    method: keyof RxStorageInstance<any, any, any>;\n    params: any[];\n};\n\nexport type RxStorageMessageChannelInternals = {\n    params: RxStorageInstanceCreationParams<any, any>;\n    /**\n     * The one of the 2 message ports where we send data to.\n     * The other port is send to the remote.\n     */\n    port: MessagePort;\n    messages$: Subject<RxStorageMessageFromRemote>;\n};\n\nexport type CreateRemoteRxStorageMethod = (\n    port: MessagePort,\n    params: RxStorageInstanceCreationParams<any, any>\n) => void;\n\ndeclare type RxStorageMessageChannelSettings = {\n    name: string;\n    statics: RxStorageStatics;\n    createRemoteStorage: CreateRemoteRxStorageMethod;\n};\n\nexport class RxStorageMessageChannel implements RxStorage<RxStorageMessageChannelInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string;\n    public readonly messageChannelByPort = new WeakMap<MessagePort, MessageChannel>();\n    constructor(\n        public readonly settings: RxStorageMessageChannelSettings\n    ) {\n        this.name = settings.name;\n        this.statics = settings.statics;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceMessageChannel<RxDocType>> {\n        const messageChannel = new MessageChannel();\n        this.messageChannelByPort.set(messageChannel.port1, messageChannel);\n        this.messageChannelByPort.set(messageChannel.port2, messageChannel);\n        const port = messageChannel.port1;\n        const messages$ = new Subject<RxStorageMessageFromRemote>();\n        const waitForOkPromise = firstValueFrom(messages$);\n        port.onmessage = msg => {\n            messages$.next(msg.data);\n        };\n        this.settings.createRemoteStorage(\n            messageChannel.port2,\n            params\n        );\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + waitForOkResult.error.toString());\n        }\n        return new RxStorageInstanceMessageChannel(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                port,\n                messages$\n            },\n            params.options\n        );\n    }\n}\n\nexport class RxStorageInstanceMessageChannel<RxDocType> implements RxStorageInstance<RxDocType, RxStorageMessageChannelInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    private lastRequestId: number = 0;\n    private requestIdSeed: string = randomCouchString(19);\n\n    constructor(\n        public readonly storage: RxStorageMessageChannel,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageMessageChannelInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            internals.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestIdNr = this.lastRequestId++;\n        const requestId = this.requestIdSeed + '|' + requestIdNr;\n        const responsePromise = firstValueFrom(\n            this.internals.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: RxStorageMessageToRemote = {\n            instanceId: this.internals.params.databaseInstanceToken,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.internals.port.postMessage(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error(response.error);\n        } else {\n            return response.return;\n        }\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n        this.internals.port.close();\n    }\n    async remove(): Promise<void> {\n        await this.requestRemote('remove', []);\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageMessageChannel(settings: RxStorageMessageChannelSettings) {\n    return new RxStorageMessageChannel(settings);\n}\n\n\nexport type RxMessageChannelExposeSettings = {\n    onCreateRemoteStorage$: Subject<{\n        port: MessagePort;\n        params: RxStorageInstanceCreationParams<any, any>;\n    }>;\n    /**\n     * The original storage\n     * which actually stores the data.\n     */\n    storage: RxStorage<any, any>;\n};\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageMessageChannel(settings: RxMessageChannelExposeSettings) {\n    type InstanceState = {\n        storageInstance: RxStorageInstance<any, any, any>;\n        ports: MessagePort[];\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n    const stateByPort: Map<MessagePort, {\n        subs: Subscription[];\n        state: InstanceState;\n    }> = new Map();\n\n\n    /**\n     * Create new RxStorageInstances\n     * on request.\n     */\n    settings.onCreateRemoteStorage$.subscribe(async (data) => {\n        const params = data.params;\n        const port = data.port;\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                const newRxStorageInstance = await settings.storage.createStorageInstance(params);\n                state = {\n                    storageInstance: newRxStorageInstance,\n                    ports: [port],\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err) {\n                port.postMessage({\n                    key: 'error',\n                    error: 'could not call createStorageInstance'\n                });\n                return;\n            }\n        }\n        port.postMessage({ key: 'ok' });\n        const subs: Subscription[] = [];\n        stateByPort.set(port, {\n            state,\n            subs\n        });\n\n        /**\n         * Automatically subscribe to the streams$\n         * because we always need them.\n         */\n        subs.push(\n            state.storageInstance.changeStream().subscribe(changes => {\n                const message: RxStorageMessageFromRemote = {\n                    instanceId: params.databaseInstanceToken,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n                port.postMessage(message);\n            })\n        );\n        subs.push(\n            state.storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: RxStorageMessageFromRemote = {\n                    instanceId: params.databaseInstanceToken,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                port.postMessage(message);\n            })\n        );\n\n\n        port.onmessage = async (plainMessage) => {\n            const message: RxStorageMessageToRemote = plainMessage.data;\n            let result;\n            try {\n                /**\n                 * On calls to 'close()',\n                 * we only close the main instance if there are no other\n                 * ports connected.\n                 */\n                if (\n                    message.method === 'close' &&\n                    ensureNotFalsy(state).ports.length > 1\n                ) {\n                    const closeBreakResponse: RxStorageMessageFromRemote = {\n                        instanceId: params.databaseInstanceToken,\n                        answerTo: message.requestId,\n                        method: message.method,\n                        return: null\n                    };\n                    port.postMessage(closeBreakResponse);\n                    return;\n                }\n\n                result = await (ensureNotFalsy(state).storageInstance as any)[message.method](...message.params);\n                if (\n                    message.method === 'close' ||\n                    message.method === 'remove'\n                ) {\n                    subs.forEach(sub => sub.unsubscribe());\n                    ensureNotFalsy(state).ports = ensureNotFalsy(state).ports.filter(p => p !== port);\n                    instanceByFullName.delete(fullName);\n                    stateByPort.delete(port);\n                    /**\n                     * TODO how to notify the other ports on remove() ?\n                     */\n                }\n                const response: RxStorageMessageFromRemote = {\n                    instanceId: params.databaseInstanceToken,\n                    answerTo: message.requestId,\n                    method: message.method,\n                    return: result\n                };\n                port.postMessage(response);\n            } catch (err) {\n                const errorResponse: RxStorageMessageFromRemote = {\n                    instanceId: params.databaseInstanceToken,\n                    answerTo: message.requestId,\n                    method: message.method,\n                    error: (err as any).toString()\n                };\n                port.postMessage(errorResponse);\n            }\n        };\n    });\n\n    return {\n        instanceByFullName,\n        stateByPort\n    };\n}\n"],"mappings":"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"}